plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "com.moowork.node" version "1.3.1"
	id "lenala.azure.azurewebapp" version "1.0.1"

}

group = 'com.mannan'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

//
/*node {
	// Version of node to use.
	version = '12.16.3'

	// Version of npm to use.
	npmVersion = '6.14.4'

	// Base URL for fetching node distributions (change if you have a mirror).
	// distBaseUrl = 'https://nodejs.org/dist'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = false

	// Set the work directory for unpacking node
	workDir = file("${project.buildDir}/src/main/my-app/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/src/main/my-app/npm")

	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/src/main/my-app")
}

task npmInstallDependencies(type: NpmTask) {
	dependsOn 'npmSetup'
	execOverrides {
		it.ignoreExitValue = true
		it.workingDir = 'src/main/my-app'
	}
	args = ['install']
}

task npmBuild(type: NpmTask) {
	dependsOn 'npmInstallDependencies'
	execOverrides {
		it.workingDir = 'src/main/my-app'
	}
	args = ['run', 'build']
}

task copyMyapptoBuild(type: Copy) {
	dependsOn 'npmBuild'
	from "$projectDir/src/main/my-app/build/"
	into "$buildDir/resources/main/static"
}
processResources {
	dependsOn 'copyMyapptoBuild'
}*/


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
    compile "com.microsoft.sqlserver:mssql-jdbc:9.4.0.jre11"
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.projectlombok:lombok:1.18.22'
	implementation 'mysql:mysql-connector-java:8.0.25'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

}


test {
	useJUnitPlatform()
}




